// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "TProxyService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::proxyserver;

class TProxyServiceHandler : virtual public TProxyServiceIf {
 public:
  TProxyServiceHandler() {
    // Your initialization goes here
  }

  /**
   * ProxyGet API
   * @return Value as Binary
   * 
   * @param Trapdoor
   */
  void ProxyGet(std::string& _return, const std::string& Trapdoor) {
    // Your implementation goes here
    printf("ProxyGet\n");
  }

  /**
   * ProxyPut API
   * 
   * @param Trapdoor
   * @param Val
   * @param IndexTrapdoor
   * @param IndexVal
   */
  void ProxyPut(const std::string& Trapdoor, const std::string& Val, const std::string& IndexTrapdoor, const std::string& IndexVal) {
    // Your implementation goes here
    printf("ProxyPut\n");
  }

  /**
   * ProxyGetColumn
   * @return a binary list of Column value
   * 
   * @param IndexTrapdoor
   * @param IndexMask
   * @param GetNum
   */
  void ProxyGetColumn(std::vector<std::string> & _return, const std::string& IndexTrapdoor, const std::string& IndexMask, const int32_t GetNum) {
    // Your implementation goes here
    printf("ProxyGetColumn\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<TProxyServiceHandler> handler(new TProxyServiceHandler());
  shared_ptr<TProcessor> processor(new TProxyServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

