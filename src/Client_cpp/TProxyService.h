/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TProxyService_H
#define TProxyService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "ProxyServer_types.h"

namespace proxyserver {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class TProxyServiceIf {
 public:
  virtual ~TProxyServiceIf() {}

  /**
   * ProxyGet API
   * @return Value as Binary
   * 
   * @param Trapdoor
   */
  virtual void ProxyGet(std::string& _return, const std::string& Trapdoor) = 0;

  /**
   * ProxyPut API
   * 
   * @param Trapdoor
   * @param Val
   * @param IndexTrapdoor
   * @param IndexVal
   */
  virtual void ProxyPut(const std::string& Trapdoor, const std::string& Val, const std::string& IndexTrapdoor, const std::string& IndexVal) = 0;

  /**
   * ProxyGetColumn
   * @return a binary list of Column value
   * 
   * @param IndexTrapdoor
   * @param IndexMask
   * @param GetNum
   */
  virtual void ProxyGetColumn(std::vector<std::string> & _return, const std::vector<std::string> & IndexTrapdoor, const std::vector<std::string> & IndexMask, const int32_t GetNum) = 0;
};

class TProxyServiceIfFactory {
 public:
  typedef TProxyServiceIf Handler;

  virtual ~TProxyServiceIfFactory() {}

  virtual TProxyServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TProxyServiceIf* /* handler */) = 0;
};

class TProxyServiceIfSingletonFactory : virtual public TProxyServiceIfFactory {
 public:
  TProxyServiceIfSingletonFactory(const boost::shared_ptr<TProxyServiceIf>& iface) : iface_(iface) {}
  virtual ~TProxyServiceIfSingletonFactory() {}

  virtual TProxyServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TProxyServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<TProxyServiceIf> iface_;
};

class TProxyServiceNull : virtual public TProxyServiceIf {
 public:
  virtual ~TProxyServiceNull() {}
  void ProxyGet(std::string& /* _return */, const std::string& /* Trapdoor */) {
    return;
  }
  void ProxyPut(const std::string& /* Trapdoor */, const std::string& /* Val */, const std::string& /* IndexTrapdoor */, const std::string& /* IndexVal */) {
    return;
  }
  void ProxyGetColumn(std::vector<std::string> & /* _return */, const std::vector<std::string> & /* IndexTrapdoor */, const std::vector<std::string> & /* IndexMask */, const int32_t /* GetNum */) {
    return;
  }
};


class TProxyService_ProxyGet_args {
 public:

  TProxyService_ProxyGet_args(const TProxyService_ProxyGet_args&);
  TProxyService_ProxyGet_args& operator=(const TProxyService_ProxyGet_args&);
  TProxyService_ProxyGet_args() : Trapdoor() {
  }

  virtual ~TProxyService_ProxyGet_args() throw();
  std::string Trapdoor;

  void __set_Trapdoor(const std::string& val);

  bool operator == (const TProxyService_ProxyGet_args & rhs) const
  {
    if (!(Trapdoor == rhs.Trapdoor))
      return false;
    return true;
  }
  bool operator != (const TProxyService_ProxyGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TProxyService_ProxyGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TProxyService_ProxyGet_pargs {
 public:


  virtual ~TProxyService_ProxyGet_pargs() throw();
  const std::string* Trapdoor;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TProxyService_ProxyGet_result__isset {
  _TProxyService_ProxyGet_result__isset() : success(false) {}
  bool success :1;
} _TProxyService_ProxyGet_result__isset;

class TProxyService_ProxyGet_result {
 public:

  TProxyService_ProxyGet_result(const TProxyService_ProxyGet_result&);
  TProxyService_ProxyGet_result& operator=(const TProxyService_ProxyGet_result&);
  TProxyService_ProxyGet_result() : success() {
  }

  virtual ~TProxyService_ProxyGet_result() throw();
  std::string success;

  _TProxyService_ProxyGet_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const TProxyService_ProxyGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TProxyService_ProxyGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TProxyService_ProxyGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TProxyService_ProxyGet_presult__isset {
  _TProxyService_ProxyGet_presult__isset() : success(false) {}
  bool success :1;
} _TProxyService_ProxyGet_presult__isset;

class TProxyService_ProxyGet_presult {
 public:


  virtual ~TProxyService_ProxyGet_presult() throw();
  std::string* success;

  _TProxyService_ProxyGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TProxyService_ProxyPut_args {
 public:

  TProxyService_ProxyPut_args(const TProxyService_ProxyPut_args&);
  TProxyService_ProxyPut_args& operator=(const TProxyService_ProxyPut_args&);
  TProxyService_ProxyPut_args() : Trapdoor(), Val(), IndexTrapdoor(), IndexVal() {
  }

  virtual ~TProxyService_ProxyPut_args() throw();
  std::string Trapdoor;
  std::string Val;
  std::string IndexTrapdoor;
  std::string IndexVal;

  void __set_Trapdoor(const std::string& val);

  void __set_Val(const std::string& val);

  void __set_IndexTrapdoor(const std::string& val);

  void __set_IndexVal(const std::string& val);

  bool operator == (const TProxyService_ProxyPut_args & rhs) const
  {
    if (!(Trapdoor == rhs.Trapdoor))
      return false;
    if (!(Val == rhs.Val))
      return false;
    if (!(IndexTrapdoor == rhs.IndexTrapdoor))
      return false;
    if (!(IndexVal == rhs.IndexVal))
      return false;
    return true;
  }
  bool operator != (const TProxyService_ProxyPut_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TProxyService_ProxyPut_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TProxyService_ProxyPut_pargs {
 public:


  virtual ~TProxyService_ProxyPut_pargs() throw();
  const std::string* Trapdoor;
  const std::string* Val;
  const std::string* IndexTrapdoor;
  const std::string* IndexVal;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TProxyService_ProxyPut_result {
 public:

  TProxyService_ProxyPut_result(const TProxyService_ProxyPut_result&);
  TProxyService_ProxyPut_result& operator=(const TProxyService_ProxyPut_result&);
  TProxyService_ProxyPut_result() {
  }

  virtual ~TProxyService_ProxyPut_result() throw();

  bool operator == (const TProxyService_ProxyPut_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TProxyService_ProxyPut_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TProxyService_ProxyPut_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TProxyService_ProxyPut_presult {
 public:


  virtual ~TProxyService_ProxyPut_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class TProxyService_ProxyGetColumn_args {
 public:

  TProxyService_ProxyGetColumn_args(const TProxyService_ProxyGetColumn_args&);
  TProxyService_ProxyGetColumn_args& operator=(const TProxyService_ProxyGetColumn_args&);
  TProxyService_ProxyGetColumn_args() : GetNum(0) {
  }

  virtual ~TProxyService_ProxyGetColumn_args() throw();
  std::vector<std::string>  IndexTrapdoor;
  std::vector<std::string>  IndexMask;
  int32_t GetNum;

  void __set_IndexTrapdoor(const std::vector<std::string> & val);

  void __set_IndexMask(const std::vector<std::string> & val);

  void __set_GetNum(const int32_t val);

  bool operator == (const TProxyService_ProxyGetColumn_args & rhs) const
  {
    if (!(IndexTrapdoor == rhs.IndexTrapdoor))
      return false;
    if (!(IndexMask == rhs.IndexMask))
      return false;
    if (!(GetNum == rhs.GetNum))
      return false;
    return true;
  }
  bool operator != (const TProxyService_ProxyGetColumn_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TProxyService_ProxyGetColumn_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TProxyService_ProxyGetColumn_pargs {
 public:


  virtual ~TProxyService_ProxyGetColumn_pargs() throw();
  const std::vector<std::string> * IndexTrapdoor;
  const std::vector<std::string> * IndexMask;
  const int32_t* GetNum;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TProxyService_ProxyGetColumn_result__isset {
  _TProxyService_ProxyGetColumn_result__isset() : success(false) {}
  bool success :1;
} _TProxyService_ProxyGetColumn_result__isset;

class TProxyService_ProxyGetColumn_result {
 public:

  TProxyService_ProxyGetColumn_result(const TProxyService_ProxyGetColumn_result&);
  TProxyService_ProxyGetColumn_result& operator=(const TProxyService_ProxyGetColumn_result&);
  TProxyService_ProxyGetColumn_result() {
  }

  virtual ~TProxyService_ProxyGetColumn_result() throw();
  std::vector<std::string>  success;

  _TProxyService_ProxyGetColumn_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const TProxyService_ProxyGetColumn_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TProxyService_ProxyGetColumn_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TProxyService_ProxyGetColumn_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TProxyService_ProxyGetColumn_presult__isset {
  _TProxyService_ProxyGetColumn_presult__isset() : success(false) {}
  bool success :1;
} _TProxyService_ProxyGetColumn_presult__isset;

class TProxyService_ProxyGetColumn_presult {
 public:


  virtual ~TProxyService_ProxyGetColumn_presult() throw();
  std::vector<std::string> * success;

  _TProxyService_ProxyGetColumn_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TProxyServiceClient : virtual public TProxyServiceIf {
 public:
  TProxyServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TProxyServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ProxyGet(std::string& _return, const std::string& Trapdoor);
  void send_ProxyGet(const std::string& Trapdoor);
  void recv_ProxyGet(std::string& _return);
  void ProxyPut(const std::string& Trapdoor, const std::string& Val, const std::string& IndexTrapdoor, const std::string& IndexVal);
  void send_ProxyPut(const std::string& Trapdoor, const std::string& Val, const std::string& IndexTrapdoor, const std::string& IndexVal);
  void recv_ProxyPut();
  void ProxyGetColumn(std::vector<std::string> & _return, const std::vector<std::string> & IndexTrapdoor, const std::vector<std::string> & IndexMask, const int32_t GetNum);
  void send_ProxyGetColumn(const std::vector<std::string> & IndexTrapdoor, const std::vector<std::string> & IndexMask, const int32_t GetNum);
  void recv_ProxyGetColumn(std::vector<std::string> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TProxyServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TProxyServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TProxyServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ProxyGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ProxyPut(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ProxyGetColumn(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TProxyServiceProcessor(boost::shared_ptr<TProxyServiceIf> iface) :
    iface_(iface) {
    processMap_["ProxyGet"] = &TProxyServiceProcessor::process_ProxyGet;
    processMap_["ProxyPut"] = &TProxyServiceProcessor::process_ProxyPut;
    processMap_["ProxyGetColumn"] = &TProxyServiceProcessor::process_ProxyGetColumn;
  }

  virtual ~TProxyServiceProcessor() {}
};

class TProxyServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TProxyServiceProcessorFactory(const ::boost::shared_ptr< TProxyServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TProxyServiceIfFactory > handlerFactory_;
};

class TProxyServiceMultiface : virtual public TProxyServiceIf {
 public:
  TProxyServiceMultiface(std::vector<boost::shared_ptr<TProxyServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TProxyServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TProxyServiceIf> > ifaces_;
  TProxyServiceMultiface() {}
  void add(boost::shared_ptr<TProxyServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ProxyGet(std::string& _return, const std::string& Trapdoor) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ProxyGet(_return, Trapdoor);
    }
    ifaces_[i]->ProxyGet(_return, Trapdoor);
    return;
  }

  void ProxyPut(const std::string& Trapdoor, const std::string& Val, const std::string& IndexTrapdoor, const std::string& IndexVal) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ProxyPut(Trapdoor, Val, IndexTrapdoor, IndexVal);
    }
    ifaces_[i]->ProxyPut(Trapdoor, Val, IndexTrapdoor, IndexVal);
  }

  void ProxyGetColumn(std::vector<std::string> & _return, const std::vector<std::string> & IndexTrapdoor, const std::vector<std::string> & IndexMask, const int32_t GetNum) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ProxyGetColumn(_return, IndexTrapdoor, IndexMask, GetNum);
    }
    ifaces_[i]->ProxyGetColumn(_return, IndexTrapdoor, IndexMask, GetNum);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class TProxyServiceConcurrentClient : virtual public TProxyServiceIf {
 public:
  TProxyServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TProxyServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ProxyGet(std::string& _return, const std::string& Trapdoor);
  int32_t send_ProxyGet(const std::string& Trapdoor);
  void recv_ProxyGet(std::string& _return, const int32_t seqid);
  void ProxyPut(const std::string& Trapdoor, const std::string& Val, const std::string& IndexTrapdoor, const std::string& IndexVal);
  int32_t send_ProxyPut(const std::string& Trapdoor, const std::string& Val, const std::string& IndexTrapdoor, const std::string& IndexVal);
  void recv_ProxyPut(const int32_t seqid);
  void ProxyGetColumn(std::vector<std::string> & _return, const std::vector<std::string> & IndexTrapdoor, const std::vector<std::string> & IndexMask, const int32_t GetNum);
  int32_t send_ProxyGetColumn(const std::vector<std::string> & IndexTrapdoor, const std::vector<std::string> & IndexMask, const int32_t GetNum);
  void recv_ProxyGetColumn(std::vector<std::string> & _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
